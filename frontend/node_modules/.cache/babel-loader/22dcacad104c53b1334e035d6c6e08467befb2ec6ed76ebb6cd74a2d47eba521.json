{"ast":null,"code":"// frontend/src/services/authService.js\nimport axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';const api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// ---- Token sur chaque requête\napi.interceptors.request.use(config=>{const token=localStorage.getItem('us_token');if(token)config.headers.Authorization=\"Bearer \".concat(token);return config;});// ---- Gestion 401 / 409 globalement\napi.interceptors.response.use(res=>res,error=>{var _error$response,_error$response2;const status=(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status;const data=(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data;if(status===401){localStorage.removeItem('us_token');localStorage.removeItem('us_user');window.location.href='/';}if(status===409&&(data===null||data===void 0?void 0:data.error)==='not_in_couple'){if(window.location.pathname!=='/onboarding-couple'){window.location.href='/onboarding-couple';}}return Promise.reject(error);});// ---- Auth\nexport const authService={login:async(email,password)=>(await api.post('/login',{email,password})).data,register:async(name,email,password)=>(await api.post('/register',{name,email,password})).data,getUsers:async()=>(await api.get('/users')).data};// ---- Couple\nexport const coupleService={me:async()=>(await api.get('/couple/me')).data,create:async()=>(await api.post('/couple/create')).data,join:async invite_code=>(await api.post('/couple/join',{invite_code})).data,refreshInvite:async()=>(await api.post('/couple/invite/refresh')).data};// ---- Reminders\nexport const reminderService={getAll:async()=>(await api.get('/reminders')).data,create:async reminder=>(await api.post('/reminders',reminder)).data,update:async(id,updates)=>(await api.put(\"/reminders/\".concat(id),updates)).data,delete:async id=>(await api.delete(\"/reminders/\".concat(id))).data};// ---- Restaurants\nexport const restaurantService={getAll:async()=>(await api.get('/restaurants')).data,create:async restaurant=>(await api.post('/restaurants',restaurant)).data,update:async(id,updates)=>(await api.put(\"/restaurants/\".concat(id),updates)).data,delete:async id=>(await api.delete(\"/restaurants/\".concat(id))).data};// ---- Activities\nexport const activityService={getAll:async()=>(await api.get('/activities')).data,create:async activity=>(await api.post('/activities',activity)).data,update:async(id,updates)=>(await api.put(\"/activities/\".concat(id),updates)).data,delete:async id=>(await api.delete(\"/activities/\".concat(id))).data};// ---- Wishlist\nexport const wishlistService={getAll:async()=>(await api.get('/wishlist')).data,create:async item=>(await api.post('/wishlist',item)).data,update:async(id,updates)=>(await api.put(\"/wishlist/\".concat(id),updates)).data,delete:async id=>(await api.delete(\"/wishlist/\".concat(id))).data};// ---- Photos\nexport const photoService={getAll:async()=>(await api.get('/photos')).data,create:async photo=>(await api.post('/photos',photo)).data,update:async(id,updates)=>(await api.put(\"/photos/\".concat(id),updates)).data,delete:async id=>(await api.delete(\"/photos/\".concat(id))).data,// Upload avec fichier\nuploadMultipart:async formData=>{// Endpoint /photos gère déjà la création des documents en base.\nconst token=localStorage.getItem('us_token');const res=await axios.post(\"\".concat(API_BASE_URL,\"/photos\"),formData,{headers:{'Authorization':\"Bearer \".concat(token)}});return res.data;// tableau de photos créées\n},compressImage:async function(file){let{maxWidth=1600,quality=0.75}=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(!file.type.startsWith('image/'))return file;const img=document.createElement('img');const url=URL.createObjectURL(file);try{await new Promise((res,rej)=>{img.onload=res;img.onerror=rej;img.src=url;});const scale=Math.min(1,maxWidth/img.width);const canvas=document.createElement('canvas');canvas.width=Math.round(img.width*scale);canvas.height=Math.round(img.height*scale);const ctx=canvas.getContext('2d');ctx.drawImage(img,0,0,canvas.width,canvas.height);const blob=await new Promise(r=>canvas.toBlob(r,'image/jpeg',quality));if(!blob)return file;return new File([blob],file.name.replace(/\\.[^.]+$/,'.jpg'),{type:'image/jpeg'});}catch(_unused){return file;}finally{URL.revokeObjectURL(url);}}};// ---- Notes\nexport const noteService={getAll:async()=>(await api.get('/notes')).data,create:async note=>(await api.post('/notes',note)).data,update:async(id,updates)=>(await api.put(\"/notes/\".concat(id),updates)).data,delete:async id=>(await api.delete(\"/notes/\".concat(id))).data};export default api;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// Service de notifications crois√©es entre les deux utilisateurs du couple\nimport notificationService from'./notificationService';class CrossNotificationService{constructor(){this.isPolling=false;this.pollingInterval=null;this.lastChecked=Date.now();this.notificationHistory=new Set();// Pour √©viter les doublons\n}// D√©marrer le syst√®me de notifications crois√©es\nasync startCrossNotifications(){if(this.isPolling)return;// Initialiser les notifications PWA\nawait notificationService.init();this.isPolling=true;this.lastChecked=Date.now();// V√©rifier les nouvelles activit√©s toutes les 30 secondes\nthis.pollingInterval=setInterval(()=>{this.checkForNewActivity();},30000);console.log('üîî Syst√®me de notifications crois√©es d√©marr√©');}// Arr√™ter le syst√®me\nstopCrossNotifications(){if(this.pollingInterval){clearInterval(this.pollingInterval);this.pollingInterval=null;}this.isPolling=false;console.log('üîï Syst√®me de notifications crois√©es arr√™t√©');}// V√©rifier les nouvelles activit√©s depuis la derni√®re v√©rification\nasync checkForNewActivity(){try{const now=Date.now();const timeSince=new Date(this.lastChecked);// R√©cup√©rer l'utilisateur actuel\nconst currentUser=JSON.parse(localStorage.getItem('us_user')||'{}');if(!currentUser._id)return;// V√©rifier les nouveaux rappels\nawait this.checkNewReminders(currentUser._id,timeSince);// V√©rifier les nouveaux items de wishlist\nawait this.checkNewWishlistItems(currentUser._id,timeSince);// V√©rifier les nouvelles activit√©s\nawait this.checkNewActivities(currentUser._id,timeSince);// V√©rifier les nouveaux restaurants\nawait this.checkNewRestaurants(currentUser._id,timeSince);this.lastChecked=now;}catch(error){console.error('Erreur lors de la v√©rification des nouvelles activit√©s:',error);}}// V√©rifier les nouveaux rappels ajout√©s par le/la partenaire\nasync checkNewReminders(currentUserId,since){try{const{reminderService}=await import('./authService');const reminders=await reminderService.getAll();const newReminders=reminders.filter(reminder=>{const createdAt=new Date(reminder.created_at);const notificationId=\"reminder_\".concat(reminder._id);return createdAt>since&&reminder.created_by!==currentUserId&&!this.notificationHistory.has(notificationId);});for(const reminder of newReminders){const notificationId=\"reminder_\".concat(reminder._id);await this.notifyPartnerActivity('reminder',reminder);this.notificationHistory.add(notificationId);}}catch(error){console.error('Erreur v√©rification rappels:',error);}}// V√©rifier les nouveaux items de wishlist\nasync checkNewWishlistItems(currentUserId,since){try{const{wishlistService}=await import('./authService');const wishlistItems=await wishlistService.getAll();const newItems=wishlistItems.filter(item=>{const createdAt=new Date(item.created_at);const notificationId=\"wishlist_\".concat(item._id);return createdAt>since&&item.created_by!==currentUserId&&!this.notificationHistory.has(notificationId);});for(const item of newItems){const notificationId=\"wishlist_\".concat(item._id);await this.notifyPartnerActivity('wishlist',item);this.notificationHistory.add(notificationId);}}catch(error){console.error('Erreur v√©rification wishlist:',error);}}// V√©rifier les nouvelles activit√©s\nasync checkNewActivities(currentUserId,since){try{const{activityService}=await import('./authService');const activities=await activityService.getAll();const newActivities=activities.filter(activity=>{const createdAt=new Date(activity.created_at);const notificationId=\"activity_\".concat(activity._id);return createdAt>since&&activity.created_by!==currentUserId&&!this.notificationHistory.has(notificationId);});for(const activity of newActivities){const notificationId=\"activity_\".concat(activity._id);await this.notifyPartnerActivity('activity',activity);this.notificationHistory.add(notificationId);}}catch(error){console.error('Erreur v√©rification activit√©s:',error);}}// V√©rifier les nouveaux restaurants\nasync checkNewRestaurants(currentUserId,since){try{const{restaurantService}=await import('./authService');const restaurants=await restaurantService.getAll();const newRestaurants=restaurants.filter(restaurant=>{const createdAt=new Date(restaurant.created_at);const notificationId=\"restaurant_\".concat(restaurant._id);return createdAt>since&&restaurant.created_by!==currentUserId&&!this.notificationHistory.has(notificationId);});for(const restaurant of newRestaurants){const notificationId=\"restaurant_\".concat(restaurant._id);await this.notifyPartnerActivity('restaurant',restaurant);this.notificationHistory.add(notificationId);}}catch(error){console.error('Erreur v√©rification restaurants:',error);}}// Envoyer la notification selon le type d'activit√©\nasync notifyPartnerActivity(type,data){if(!notificationService.isEnabled())return;let title,body,url;switch(type){case'reminder':title='üìù Nouveau rappel';body=\"Ton/ta partenaire a ajout\\xE9: \\\"\".concat(data.title,\"\\\"\");url='/rappels';break;case'wishlist':title='üéÅ Nouvel item wishlist';body=\"Ton/ta partenaire veut: \\\"\".concat(data.title,\"\\\"\");url='/wishlist';break;case'activity':title='üéØ Nouvelle activit√©';body=\"Ton/ta partenaire a ajout\\xE9: \\\"\".concat(data.title,\"\\\"\");url='/activites';break;case'restaurant':title='üçΩÔ∏è Nouveau restaurant';body=\"Ton/ta partenaire a ajout\\xE9: \\\"\".concat(data.name,\"\\\"\");url='/restaurants';break;default:return;}const options={body,icon:'/favicon.ico',data:{type:\"partner_\".concat(type),itemId:data._id,url},actions:[{action:'view',title:'Voir',icon:'/favicon.ico'},{action:'dismiss',title:'OK',icon:'/favicon.ico'}],requireInteraction:false,vibrate:[100,50,100]};await notificationService.showNotification(title,options);}// Forcer une v√©rification imm√©diate (√† appeler apr√®s cr√©ation d'un item)\nasync triggerImmediateCheck(){if(this.isPolling){await this.checkForNewActivity();}}// Obtenir le statut du service\ngetStatus(){return{isPolling:this.isPolling,lastChecked:this.lastChecked,notificationHistory:this.notificationHistory.size,isNotificationEnabled:notificationService.isEnabled()};}}// Instance singleton\nconst crossNotificationService=new CrossNotificationService();export default crossNotificationService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
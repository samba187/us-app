{"ast":null,"code":"// Service d'inscription aux notifications push Web (vraies notifications background)\n// Nécessite des clés VAPID côté backend.\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nasync function getPublicKey() {\n  const res = await fetch(`${API_BASE_URL}/push/public-key`);\n  const data = await res.json();\n  return data.publicKey;\n}\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\nexport async function registerPush() {\n  if (!('serviceWorker' in navigator) || !('PushManager' in window)) {\n    console.log('[Push] Non supporté');\n    return false;\n  }\n  try {\n    const reg = await navigator.serviceWorker.ready;\n    const publicKey = await getPublicKey();\n    if (!publicKey) {\n      console.log('[Push] Pas de clé publique côté serveur');\n      return false;\n    }\n    const sub = await reg.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(publicKey)\n    });\n    const token = localStorage.getItem('us_token');\n    await fetch(`${API_BASE_URL}/push/subscribe`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(sub)\n    });\n    console.log('[Push] Subscription envoyée au backend');\n    return true;\n  } catch (e) {\n    console.log('[Push] Erreur subscription', e);\n    return false;\n  }\n}\nexport async function testPush() {\n  const token = localStorage.getItem('us_token');\n  const res = await fetch(`${API_BASE_URL}/push/test`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return res.json();\n}","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","getPublicKey","res","fetch","data","json","publicKey","urlBase64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","registerPush","navigator","console","log","reg","serviceWorker","ready","sub","pushManager","subscribe","userVisibleOnly","applicationServerKey","token","localStorage","getItem","method","headers","body","JSON","stringify","e","testPush"],"sources":["C:/Users/sorbo/US/us-app/frontend/src/services/pushService.js"],"sourcesContent":["// Service d'inscription aux notifications push Web (vraies notifications background)\r\n// Nécessite des clés VAPID côté backend.\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nasync function getPublicKey() {\r\n  const res = await fetch(`${API_BASE_URL}/push/public-key`);\r\n  const data = await res.json();\r\n  return data.publicKey;\r\n}\r\n\r\nfunction urlBase64ToUint8Array(base64String) {\r\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\r\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\r\n  const rawData = window.atob(base64);\r\n  const outputArray = new Uint8Array(rawData.length);\r\n  for (let i = 0; i < rawData.length; ++i) {\r\n    outputArray[i] = rawData.charCodeAt(i);\r\n  }\r\n  return outputArray;\r\n}\r\n\r\nexport async function registerPush() {\r\n  if (!('serviceWorker' in navigator) || !('PushManager' in window)) {\r\n    console.log('[Push] Non supporté');\r\n    return false;\r\n  }\r\n  try {\r\n    const reg = await navigator.serviceWorker.ready;\r\n    const publicKey = await getPublicKey();\r\n    if (!publicKey) { console.log('[Push] Pas de clé publique côté serveur'); return false; }\r\n    const sub = await reg.pushManager.subscribe({\r\n      userVisibleOnly: true,\r\n      applicationServerKey: urlBase64ToUint8Array(publicKey)\r\n    });\r\n    const token = localStorage.getItem('us_token');\r\n    await fetch(`${API_BASE_URL}/push/subscribe`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },\r\n      body: JSON.stringify(sub)\r\n    });\r\n    console.log('[Push] Subscription envoyée au backend');\r\n    return true;\r\n  } catch (e) {\r\n    console.log('[Push] Erreur subscription', e);\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function testPush() {\r\n  const token = localStorage.getItem('us_token');\r\n  const res = await fetch(`${API_BASE_URL}/push/test`, { method: 'POST', headers: { 'Authorization': `Bearer ${token}` }});\r\n  return res.json();\r\n}\r\n"],"mappings":"AAAA;AACA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,eAAeC,YAAYA,CAAA,EAAG;EAC5B,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,kBAAkB,CAAC;EAC1D,MAAMO,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;EAC7B,OAAOD,IAAI,CAACE,SAAS;AACvB;AAEA,SAASC,qBAAqBA,CAACC,YAAY,EAAE;EAC3C,MAAMC,OAAO,GAAG,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC,GAAIF,YAAY,CAACG,MAAM,GAAG,CAAE,IAAI,CAAC,CAAC;EAC/D,MAAMC,MAAM,GAAG,CAACJ,YAAY,GAAGC,OAAO,EAAEI,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EAC7E,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACJ,MAAM,CAAC;EACnC,MAAMK,WAAW,GAAG,IAAIC,UAAU,CAACJ,OAAO,CAACH,MAAM,CAAC;EAClD,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,OAAO,CAACH,MAAM,EAAE,EAAEQ,CAAC,EAAE;IACvCF,WAAW,CAACE,CAAC,CAAC,GAAGL,OAAO,CAACM,UAAU,CAACD,CAAC,CAAC;EACxC;EACA,OAAOF,WAAW;AACpB;AAEA,OAAO,eAAeI,YAAYA,CAAA,EAAG;EACnC,IAAI,EAAE,eAAe,IAAIC,SAAS,CAAC,IAAI,EAAE,aAAa,IAAIP,MAAM,CAAC,EAAE;IACjEQ,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC,OAAO,KAAK;EACd;EACA,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMH,SAAS,CAACI,aAAa,CAACC,KAAK;IAC/C,MAAMrB,SAAS,GAAG,MAAML,YAAY,CAAC,CAAC;IACtC,IAAI,CAACK,SAAS,EAAE;MAAEiB,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;MAAE,OAAO,KAAK;IAAE;IACxF,MAAMI,GAAG,GAAG,MAAMH,GAAG,CAACI,WAAW,CAACC,SAAS,CAAC;MAC1CC,eAAe,EAAE,IAAI;MACrBC,oBAAoB,EAAEzB,qBAAqB,CAACD,SAAS;IACvD,CAAC,CAAC;IACF,MAAM2B,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAC9C,MAAMhC,KAAK,CAAC,GAAGN,YAAY,iBAAiB,EAAE;MAC5CuC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE,kBAAkB;QAAE,eAAe,EAAE,UAAUJ,KAAK;MAAG,CAAC;MACnFK,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,GAAG;IAC1B,CAAC,CAAC;IACFL,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IACrD,OAAO,IAAI;EACb,CAAC,CAAC,OAAOiB,CAAC,EAAE;IACVlB,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEiB,CAAC,CAAC;IAC5C,OAAO,KAAK;EACd;AACF;AAEA,OAAO,eAAeC,QAAQA,CAAA,EAAG;EAC/B,MAAMT,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAC9C,MAAMjC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,YAAY,EAAE;IAAEuC,MAAM,EAAE,MAAM;IAAEC,OAAO,EAAE;MAAE,eAAe,EAAE,UAAUJ,KAAK;IAAG;EAAC,CAAC,CAAC;EACxH,OAAO/B,GAAG,CAACG,IAAI,CAAC,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}